Docker compose

sample application - voting application

docker run -d --name=redis redis (-d : running in the background)
docker run -d --name=db postgres:9.4 --link db:db result-app
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app (web UI instance running on port 80, publish that port to 5000 on the host system)
docker run -d --name=result -p 5001:80 (an app image and publish port 80 to port 5001)
docker run -d --name=worker --link db:db --link redis:redis worker
    
docker-compose.yaml
redis:
    image: redis
db:
    image: postgres:9.4
vote:
    image: voting-app
    ports : 
        - 5000 : 80
    links:
        - redis
result:
    image: result-app
    ports:
        - 5001: 80
    links:
        - db
worker:
    image: worker
    links: 
        - redis
        - db

to bring up the entire application stack : docker-compose up

Docker compose - build

instruct Docker to run a Docker build, instead an image

docker-compose.yaml
redis:
    image: redis
db:
    image: postgres:9.4
vote:
    build: ./vote
    ports : 
        - 5000 : 80
    links:
        - redis
result:
    build: ./result
    ports:
        - 5001: 80
    links:
        - db
worker:
    build: ./worker
    links: 
        - redis 
        - db

build: ./vote nghĩa là:
→ Docker Compose sẽ đi vào thư mục ./vote
→ Tìm file Dockerfile
→ Dùng docker build để tạo image mới.

Docker compose - versions

docker version 1 : have to link up everything
docker version 2 : create a bridge network -> attaches all containers to that new network -> all containers able to communicate to each other using each other's service name.

exp : 
version: 2
services:
    redis:
        image: redis
    db: 
        image: postgres:9.4
    vote:
        image: voting-app
        ports:
            - 5000:80
        depends_on:
            - redis

docker version 3 : can use swarm

Docker compose - network

version: 2
services:
    redis:
        image: redis
        networks:
            - back-end
    db: 
        image: postgres:9.4
        networks:
            - back-end
    vote:
        image: voting-app
        ports:
            - 5000:80
        depends_on:
            - redis
        networks:
            - front-end
            - back-end
    result:
        image: result
        networks:
            - front-end
            - back-end

networks:
    front-end:
    back-end:








